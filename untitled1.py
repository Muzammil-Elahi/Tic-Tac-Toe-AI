# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LdUXzc5XiGl-RhtGQ7UDuEx2hWxdq_Lk
"""

!pip install mcts

import string
import numpy as np
import tensorflow as tf
from mcts import mcts
from copy import deepcopy

def get_input():
  a = input("enter coordiated of where you want to place Format:Row,Column")
  a=a.split(",")
  X = int(a[0])
  Y = int(a[1])
  if(X>3):
    print("please enter an X coordinate of under 3")
    a = input("enter coordiated of where you want to place Format:Row,Column")
    a=a.split(",")
    X = int(a[0])
    Y = int(a[1])
  if(Y>3):
    print("please enter an Y coordinate of under 3")
    a = input("enter coordiated of where you want to place Format:Row,Column")
    a=a.split(",")
    X = int(a[0])
    Y = int(a[1])
  if(Matrix[X][Y]!=-1):
    print("Place already taken up, please choose another coordinate")
    a = input("enter coordiated of where you want to place Format:Row,Column")
    a=a.split(",")
    X = int(a[0])
    Y = int(a[1])
  return X,Y

X,Y = get_input()
Matrix[X][Y] = 'X'
print(Matrix[0])
print(Matrix[1])
print(Matrix[2])

class TicTacToe():
  def __init__(self):
    self.board = [[-1 for x in range(3)] for y in range(3)]
    self.currentPlayer = "X"
  
  
  def getPossibleActions(self):
    possibleActions = []
    for i in range(3):
      for j in range(3):
        if(self.board[i][j]==-1):
          possibleActions.append(Action(player=self.currentPlayer,x=i,y=j))
    return possibleActions
  
  
  def takeAction(self,action):
    newState = deepcopy(self)
    newState.board[action.x][action.y]=action.player
    if(newState.currentplayer == "X"):
      newState.currentplayer = "O"
    else:
      newState.currentplayer == "X"
  
  def isTerminal(self):
    for row in self.board:
      #if(row[0] == "X" and row[1] == "X" and row[2] == "X")
      if((row[0] and row[1] and row[2]) == "X"):
        return True
    for col in list(map(list, zip(*self.board))):
      if((col[0] and col[1] and col[2]) == "X"):
        return True

class Action():
    def __init__(self, player, x, y):
        self.player = player
        self.x = x
        self.y = y

    def __str__(self):
        return str((self.x, self.y))

    def __repr__(self):
        return str(self)

    def __eq__(self, other):
        return self.__class__ == other.__class__ and self.x == other.x and self.y == other.y and self.player == other.player

    def __hash__(self):
        return hash((self.x, self.y, self.player))